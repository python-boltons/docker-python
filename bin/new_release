#!/bin/bash

BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "${BIN}"/bugyi_20240118.sh

IMAGE_NAME=pythonboltons/main
CALENDAR_VERSION=$(date +%Y.%m.%d)

function run_cmd() {
  local cmd="$1"
  shift

  log::info "${cmd}"
  if [[ "${DRY_RUN}" != true ]]; then
      if bash -c "${cmd}"; then
        return 0
      else
        return 1
      fi
  fi
}

TEMP_CMD_FILE="$(mktemp -t --suffix=.SUFFIX new_release.XXXXXX)"
trap "rm -f '$TEMP_CMD_FILE'" 0               # EXIT
trap "rm -f '$TEMP_CMD_FILE'; exit 1" 2       # INT
trap "rm -f '$TEMP_CMD_FILE'; exit 1" 1 15    # HUP TERM

function run() {
  if [[ "$1" == "-n" || "$1" == "--dry-run" ]]; then
    shift
    log::info "DRY RUN MODE ACTIVATED!"
    DRY_RUN=true
  fi

  local new_version="${CALENDAR_VERSION}"
  local i=0
  while "${BIN}"/git_tag_exists "${new_version}"; do
    i=$((i + 1))

    new_version="${CALENDAR_VERSION}"-"${i}"
    if [[ "${i}" -ge 100 ]]; then
      log::error "Bad version. Maximum of 100 releases per-day: %s" "${new_version}"
      return 1
    fi
  done

  local versioned_image_name="${IMAGE_NAME}":"${new_version}"

  # Add files to git and a new git tag; then commit and push.
  run_cmd "git add -v --all" && \
  echo "New Release: ${versioned_image_name}" > "${TEMP_CMD_FILE}" && \
  run_cmd "git commit --verbose --file ${TEMP_CMD_FILE}" && \
  run_cmd "git tag ${new_version}" && \
  run_cmd "git push && git push --tags" && \
  # Build, tag, and push Docker imagge.
  run_cmd "docker build -t ${IMAGE_NAME} ." && \
  run_cmd "docker tag ${IMAGE_NAME} ${versioned_image_name}" && \
  run_cmd "docker push -a ${IMAGE_NAME}"
}

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    run "$@"
fi
